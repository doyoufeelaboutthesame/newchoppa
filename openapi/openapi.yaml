openapi: 3.1.0
info:
  title: Title
  description: Title
  version: 1.0.0
servers:
  - url: 'https'
paths:
  /tasks:
    get:
      summary: Get all tasks
      tags:
        - tasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      tags:
        - tasks
      requestBody:
        description: The task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: The created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /tasksforuser/{id}:
    get:
      summary: Get tasks for User by ID
      tags:
        - users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: uint
          required: true
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  /tasks/{id}:
    patch:
      summary: Update task
      tags:
        - tasks
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: uint
          required: true
      requestBody:
        description: Updated task
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: The updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    delete:
      summary: Delete task
      tags:
        - tasks
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: uint
          required: true
      responses:
        '204':
          description: Deleted successfully
  /users:
    get:
      summary: Get all users
      tags:
        - users
      responses:
        '200':
          description: A list of Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Make new User
      tags:
        - users
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The created User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    patch:
      summary: Update user by ID
      tags:
        - users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: uint
          required: true
      requestBody:
        description: New fields for User
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The updated User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - users
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          format: uint
        required: true
      responses:
        '204':
          description: Deleted successfully
components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: uint
        task:
          type: string
        is_done:
          type: boolean
        user_id:
          type: integer
          format: uint
    User:
      type: object
      properties:
        id:
          type: integer
          format: uint
        email:
          type: string
        password:
          type: string